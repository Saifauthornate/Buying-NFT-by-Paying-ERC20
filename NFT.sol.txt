// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;
import "./Token.sol";

import "@openzeppelin/contracts/token/ERC721/ERC721.sol";
import "@openzeppelin/contracts/utils/Counters.sol";
import "@openzeppelin/contracts/token/ERC20/IERC20.sol";

interface IToken

		{
		function totalSupply() 	external view returns (uint256);
		function balanceOf(address account)	 external view returns (uint256);
		function transfer(address to, uint256 amount) 	external returns (bool);
		function allowance(address owner, address spender) 	external view returns (uint256);
		function approve(address spender, uint256 amount) 	external returns (bool);
		function transferFrom(  address from, address to, uint256 amount  ) 	external returns (bool);
		}

contract MyNft is ERC721 {
	using Counters for Counters.Counter;
	Counters.Counter private _tokenIds;


	IToken token; //erc20 address
	
	uint public price= 1* 10**18;

	

	constructor(IToken addr)  ERC721("AuthorNate", "ANT"){
		token = addr;
	}

	function mintNFT(address to ) public returns(uint256){
		
		require(_tokenIds.current()<=10,"Limit Crossed");
		uint256 newTokenId = _tokenIds.current();

		_mint(to, newTokenId);

		
		_tokenIds.increment();
		
	}
	

	function buyNFT(uint256 tokenId) public payable {
			

			require (token.balanceOf(msg.sender)>= price,"Low balance ");

			token.transferFrom(msg.sender,ownerOf(tokenId),price);	

			 _transfer(ownerOf(tokenId) , msg.sender , tokenId);
				
	}

		}